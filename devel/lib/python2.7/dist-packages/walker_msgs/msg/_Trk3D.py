# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from walker_msgs/Trk3D.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Trk3D(genpy.Message):
  _md5sum = "169d909016531f97d1f464ce749f5681"
  _type = "walker_msgs/Trk3D"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 vx
float32 vy
float32 yaw
float32 radius
float32 confidence
int8 class_id
"""
  __slots__ = ['x','y','vx','vy','yaw','radius','confidence','class_id']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,vx,vy,yaw,radius,confidence,class_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trk3D, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.radius is None:
        self.radius = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.class_id is None:
        self.class_id = 0
    else:
      self.x = 0.
      self.y = 0.
      self.vx = 0.
      self.vy = 0.
      self.yaw = 0.
      self.radius = 0.
      self.confidence = 0.
      self.class_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fb().pack(_x.x, _x.y, _x.vx, _x.vy, _x.yaw, _x.radius, _x.confidence, _x.class_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.x, _x.y, _x.vx, _x.vy, _x.yaw, _x.radius, _x.confidence, _x.class_id,) = _get_struct_7fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fb().pack(_x.x, _x.y, _x.vx, _x.vy, _x.yaw, _x.radius, _x.confidence, _x.class_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.x, _x.y, _x.vx, _x.vy, _x.yaw, _x.radius, _x.confidence, _x.class_id,) = _get_struct_7fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fb = None
def _get_struct_7fb():
    global _struct_7fb
    if _struct_7fb is None:
        _struct_7fb = struct.Struct("<7fb")
    return _struct_7fb
