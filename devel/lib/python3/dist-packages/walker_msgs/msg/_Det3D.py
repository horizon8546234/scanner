# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from walker_msgs/Det3D.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Det3D(genpy.Message):
  _md5sum = "7da55de3f441fc2374979407d5fddda3"
  _type = "walker_msgs/Det3D"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 z
float32 yaw
float32 radius
float32 confidence
string class_name
int8 class_id

float32 h
float32 w
float32 l
"""
  __slots__ = ['x','y','z','yaw','radius','confidence','class_name','class_id','h','w','l']
  _slot_types = ['float32','float32','float32','float32','float32','float32','string','int8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,yaw,radius,confidence,class_name,class_id,h,w,l

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Det3D, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.radius is None:
        self.radius = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.class_name is None:
        self.class_name = ''
      if self.class_id is None:
        self.class_id = 0
      if self.h is None:
        self.h = 0.
      if self.w is None:
        self.w = 0.
      if self.l is None:
        self.l = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.yaw = 0.
      self.radius = 0.
      self.confidence = 0.
      self.class_name = ''
      self.class_id = 0
      self.h = 0.
      self.w = 0.
      self.l = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.yaw, _x.radius, _x.confidence))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b3f().pack(_x.class_id, _x.h, _x.w, _x.l))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x, _x.y, _x.z, _x.yaw, _x.radius, _x.confidence,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.class_id, _x.h, _x.w, _x.l,) = _get_struct_b3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.yaw, _x.radius, _x.confidence))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b3f().pack(_x.class_id, _x.h, _x.w, _x.l))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x, _x.y, _x.z, _x.yaw, _x.radius, _x.confidence,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.class_id, _x.h, _x.w, _x.l,) = _get_struct_b3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_b3f = None
def _get_struct_b3f():
    global _struct_b3f
    if _struct_b3f is None:
        _struct_b3f = struct.Struct("<b3f")
    return _struct_b3f
